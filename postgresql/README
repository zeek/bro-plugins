
================================================
Logging to, and input from, PostgreSQL Databases
================================================

Introduction and Warning
------------------------

This plugin offers the possibility to log to PostgreSQL databases as
well as to read information from PostgreSQL databases. Note that the
current state of the plugin is still experimental.

Installation
------------

After installing PostgreSQL, the following command will compile and install
the Bro PostgreSQL module, assuming it can find the headers in a standard
location::

    # ./configure && make && make install

If PostgreSQL is installed in a non-standard location, add
``--with-postgresql=<postgresql-base-directory`` to the ``configure`` command.
If everything built and installed correctly, you should see this::

    # bro -N Bro::PostgreSQL
    Bro::PostgreSQL - PostgreSQL log writer and input reader (dynamic, version 0.1)

Usage
-----

The easiest way to add logging to PostgreSQL is to add a logging filter. An
example, to also push the conn.log to PostgreSQL is:

.. console::

    event bro_init()
    {
    	local filter: Log::Filter = [$name="postgres", $path="conn", $writer=Log::WRITER_POSTGRESQL, $config=table(["dbname"]="testdb")];
    	Log::add_filter(Conn::LOG, filter);
    }

This will write to a database named testdb into the table named conn. To
create this database, issue commands similar to::

    initdb testdb
    postgres -D testdb
    createdb testdb

The table will automatically be created if it does not exist.

To read back this data, use a script like this:

.. console::

    redef exit_only_after_terminate = T;

    type InfoType: record {
    	ts: time;
    	uid: string;
    	duration: interval;
    };

    event line(description: Input::EventDescription, tpe: Input::Event, r: InfoType)
    	{
    	print r;
    	}

    event bro_init()
    	{
    	Input::add_event([$source="select ts, uid, duration from conn;", $name="postgres", $fields=InfoType, $ev=line, $want_record=T,
    		$reader=Input::READER_POSTGRESQL, $config=table(["dbname"]="testdb")]);
    	}

    event Input::end_of_data(name: string, source:string)
    	{
    	print "End of data";
    	terminate();
    	}

Please note that the plugin connects to PostgreSQL as the user running Bro,
without supplying any additional username or password.
